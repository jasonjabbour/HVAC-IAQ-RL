#Global Variables
school = 'UVA'
room = '211 Olsson'
#Load Motion Data
motion_data = read.table('./Data/motion_data.csv',header=T,sep=',')
#Select Date and Value
motion_data = motion_data %>% filter(location_general==school && location_specific==room) %>% select(time,value)
#Remove Duplicate Time Stamps
motion_data = motion_data %>%  distinct(time, .keep_all = T)
#Convert Time String to Time Object and Strip Extra Content
motion_data$time = strptime(motion_data$time,format = '%Y-%m-%d %H:%M:%OS')
#Bin the Sum of Motion Values into same hour
motion_data %>%
mutate(rounded_time =  trunc(time, "hours"))
#Bin the Sum of Motion Values into same hour
motion_data %>%
mutate(rounded_time = trunc(time, "hours")) %>%
group_by(rounded_time) %>%
summarise(value=sum(value))
#Bin the Sum of Motion Values into same hour
motion_data = motion_data %>%
mutate(rounded_time = trunc(time, "hours")) %>%
group_by(rounded_time) %>%
summarise(value=sum(value))
motion_data
View(motion_data)
#Load Libraries
library(tidyverse)
library(dplyr)
#Global Variables
school = 'UVA'
room = '211 Olsson'
#Load Motion Data
motion_data = read.table('./Data/motion_data.csv',header=T,sep=',')
#Select Date and Value
motion_data = motion_data %>% filter(location_general==school && location_specific==room) %>% select(time,value)
#Remove Duplicate Time Stamps
motion_data = motion_data %>%  distinct(time, .keep_all = T)
#Convert Time String to Time Object and Strip Extra Content
motion_data$time = strptime(motion_data$time,format = '%Y-%m-%d %H:%M:%OS')
#Bin the Sum of Motion Values into same hour
grouped_motion_data = motion_data %>%
mutate(rounded_time = trunc(time, "hours")) %>%
group_by(rounded_time) %>%
summarise(value=sum(value))
View(motion_data)
View(grouped_motion_data)
motion_ts = ts(grouped_motion_data$rounded_time)
motion_ts = ts(as.character(grouped_motion_data$rounded_time))
motion_ts
library(ggplot2)
autoplot(motion_ts)
#Get Time Series Format
motion_ts = ts(as.character(grouped_motion_data$rounded_time))
motion_ts
motion_ts
#Plot the Time Series
grouped_motion_data %>% ggplot(aes(x=rounded_time, y=value))+
geom_line()
#Plot the Time Series
grouped_motion_data %>% ggplot(aes(x=as.character(rounded_time), y=value))+
geom_line()
#Plot the Time Series
grouped_motion_data %>%
ggplot(aes(x=as.Date(rounded_time), y=value))+
geom_line()
knitr::opts_chunk$set(echo = TRUE)
#Load Libraries
library(tidyverse)
library(dplyr)
library(ggplot2)
#Global Variables
school = 'UVA'
room = '211 Olsson'
#Load Motion Data
motion_data = read.table('./Data/motion_data.csv',header=T,sep=',')
#Select Date and Value
motion_data = motion_data %>% filter(location_general==school && location_specific==room) %>% select(time,value)
#Remove Duplicate Time Stamps
motion_data = motion_data %>%  distinct(time, .keep_all = T)
#Convert Time String to Time Object and Strip Extra Content
motion_data$time = strptime(motion_data$time,format = '%Y-%m-%d %H:%M:%OS')
#Bin the Sum of Motion Values into same hour
grouped_motion_data = motion_data %>%
mutate(rounded_time = trunc(time, "hours")) %>%
group_by(rounded_time) %>%
summarise(value=sum(value))
#Plot the Time Series
grouped_motion_data %>%
ggplot(aes(x=as.Date(rounded_time), y=value))+
geom_line()
#Plot the Time Series
grouped_motion_data %>%
ggplot(aes(x=as.Date(rounded_time), y=value))+
geom_line()
knitr::opts_chunk$set(echo = TRUE)
#Load Libraries
library(tidyverse)
library(dplyr)
library(ggplot2)
#Global Variables
school = 'UVA'
room = '211 Olsson'
#Load Motion Data
motion_data = read.table('./Data/motion_data.csv',header=T,sep=',')
#Select Date and Value
motion_data = motion_data %>% filter(location_general==school && location_specific==room) %>% select(time,value)
#Remove Duplicate Time Stamps
motion_data = motion_data %>%  distinct(time, .keep_all = T)
#Convert Time String to Time Object and Strip Extra Content
motion_data$time = strptime(motion_data$time,format = '%Y-%m-%d %H:%M:%OS')
#Bin the Sum of Motion Values into same hour
grouped_motion_data = motion_data %>%
mutate(rounded_time = trunc(time, "hours")) %>%
group_by(rounded_time) %>%
summarise(value=sum(value))
#Plot the Time Series
grouped_motion_data %>%
ggplot(aes(x=as.Date(rounded_time), y=value))+
geom_line()
grouped_motion_data = grouped_motion_data %>% filter(rounded_time >= '2021-09-01 00:00:00')
grouped_motion_data
knitr::opts_chunk$set(echo = TRUE)
#Load Libraries
library(tidyverse)
library(dplyr)
library(ggplot2)
#Global Variables
school = 'UVA'
room = '211 Olsson'
#Load Motion Data
motion_data = read.table('./Data/motion_data.csv',header=T,sep=',')
#Select Date and Value
motion_data = motion_data %>% filter(location_general==school && location_specific==room) %>% select(time,value)
#Remove Duplicate Time Stamps
motion_data = motion_data %>%  distinct(time, .keep_all = T)
#Convert Time String to Time Object and Strip Extra Content
motion_data$time = strptime(motion_data$time,format = '%Y-%m-%d %H:%M:%OS')
#Bin the Sum of Motion Values into same hour
grouped_motion_data = motion_data %>%
mutate(rounded_time = trunc(time, "hours")) %>%
group_by(rounded_time) %>%
summarise(value=sum(value))
#Plot the Time Series
grouped_motion_data %>%
ggplot(aes(x=as.Date(rounded_time), y=value))+
geom_line()
grouped_motion_data
grouped_motion_data$rounded_time = as.Date(grouped_motion_data$rounded_time)
grouped_motion_data
grouped_motion_data$rounded_time = as.Date(grouped_motion_data$rounded_time)
grouped_motion_data = grouped_motion_data %>% filter(rounded_time >= '2021-09-01 00:00:00')
grouped_motion_data
grouped_motion_data = grouped_motion_data %>% filter(rounded_time >= as.Date('2021-09-01 00:00:00'))
grouped_motion_data
start_date = '2021-09-01 00:00:00'
#Choose Start Date
grouped_motion_data = grouped_motion_data %>%
filter(rounded_time >= as.Date(start_date))
grouped_motion_data
#Plot the Time Series
grouped_motion_data %>%
ggplot(aes(x=as.Date(rounded_time), y=value))+
geom_line()
#Plot the Time Series
grouped_motion_data %>%
ggplot(aes(x=as.Date(rounded_time), y=value))+
geom_line()+
ylab("Sum Motion Occurances In Hour")+
xlab("Date")+
labs(title="Time Series of Motion Date")
#Make time series object
motion_time_ts = ts(grouped_motion_data$rounded_time)
motion_time_ts
#Make time series object
motion_time_ts = ts(as.Date(grouped_motion_data$rounded_time))
motion_time_ts
library(tseries)
#ACF
ggAcf(motion_time_ts)
?ggacf
?ggAcf
library(forecast)
#ACF
ggAcf(motion_time_ts)
grouped_motion_data$rounded_time
#Make time series object
motion_time_ts = ts(grouped_motion_data$value)
#ACF
ggAcf(motion_time_ts)
#ACF
ggAcf(motion_time_ts)
motion_periodogram = spec.pgram(motion_time_ts, spans=9, demean = T, log='no')
#Find the max peak
max_omega =
motion_periodogram$freq[which(motion_periodogram$spec==max(motion_periodogram$spec))]
#The peak is:
max_omega
#The period is:
1/max_omega
#Find the max peak
max_omega =
motion_periodogram$freq[which(motion_periodogram$spec==max(motion_periodogram$spec))]
motion_periodogram = spec.pgram(motion_time_ts, spans=9, demean = T, log='no')
#Make T
t = c(seq(1,dim(grouped_motion_data$rounded_time)))
#Make T
t = c(seq(1,dim(grouped_motion_data$rounded_time)[1]))
dim(grouped_motion_data$rounded_time)
#Make T
t = c(seq(1,dim(grouped_motion_data)[1]))
dim(grouped_motion_data)[1]
#Make T
t = c(seq(1,dim(grouped_motion_data)[1]))
#Make T
t = c(seq(1,dim(grouped_motion_data)[1]))
t
motion_season_model = lm(motion_ts ~ sin(2*pi*t/24) + cos(2*pi*t/24))
knitr::opts_chunk$set(echo = TRUE)
#Load Libraries
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tseries)
library(forecast)
#Global Variables
school = 'UVA'
room = '211 Olsson'
start_date = '2021-09-01 00:00:00'
#Load Motion Data
motion_data = read.table('./Data/motion_data.csv',header=T,sep=',')
#Select Date and Value
motion_data = motion_data %>% filter(location_general==school && location_specific==room) %>% select(time,value)
#Remove Duplicate Time Stamps
motion_data = motion_data %>%  distinct(time, .keep_all = T)
#Convert Time String to Time Object and Strip Extra Content
motion_data$time = strptime(motion_data$time,format = '%Y-%m-%d %H:%M:%OS')
#Bin the Sum of Motion Values into same hour
grouped_motion_data = motion_data %>%
mutate(rounded_time = trunc(time, "hours")) %>%
group_by(rounded_time) %>%
summarise(value=sum(value))
#Plot the Time Series
grouped_motion_data %>%
ggplot(aes(x=as.Date(rounded_time), y=value))+
geom_line()
#Convert to Date
grouped_motion_data$rounded_time = as.Date(grouped_motion_data$rounded_time)
#Choose Start Date
grouped_motion_data = grouped_motion_data %>%
filter(rounded_time >= as.Date(start_date))
#Plot the Time Series
grouped_motion_data %>%
ggplot(aes(x=as.Date(rounded_time), y=value))+
geom_line()+
ylab("Sum Motion Occurances In Hour")+
xlab("Date")+
labs(title="Time Series of Motion Date")
#Make time series object
motion_ts = ts(grouped_motion_data$value)
#ACF
ggAcf(motion_ts)
motion_periodogram = spec.pgram(motion_ts, spans=9, demean = T, log='no')
#Find the max peak
max_omega =
motion_periodogram$freq[which(motion_periodogram$spec==max(motion_periodogram$spec))]
#The peak is:
max_omega
#The period is:
1/max_omega
motion_season_model = lm(motion_ts ~ sin(2*pi*t/24) + cos(2*pi*t/24))
summary(motion_season_model)
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line()+
geom_line(aes(x=rounded_time,
y=motion_season_model$fitted.values, color="red"), size=2)
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line()+
geom_line(aes(x=rounded_time,
y=motion_season_model$fitted.values, color="red"), size=1)
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Season Model")
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Season Model")
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line()+
geom_line(aes(x=rounded_time,
y=motion_season_model$fitted.values, color="red"), size=1)+
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Season Model")
motion_trend_model = lm(motion_ts ~ t)
summary(motion_trend_model)
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Trend Model")
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line()+
stat_smooth(method='lm',col="red")+
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Trend Model")
autoplot(motion_trend_model, labels.id=NULL)
autoplot(motion_trend_model, labels.id=NULL)
#For autoplot
library(ggfortify)
autoplot(motion_trend_model, labels.id=NULL)
motion_season_trend_model = lm(motion_ts ~ t + sin(2*pi*t/24) + cos(2*pi*t/24))
summary(motion_season_trend_model)
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line()+
geom_line(aes(x=rounded_time,
y=motion_season_trend_model$fitted.values,
color="red",size=1))+
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Season and Trend Model")
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line(aes(x=rounded_time,
y=motion_season_trend_model$fitted.values,
color="red",size=1))+
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Season and Trend Model")
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line()+
geom_line(aes(x=rounded_time,
y=motion_season_trend_model$fitted.values,
color="red",size=1))+
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Season and Trend Model")
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line()+
geom_line(aes(x=rounded_time,
y=motion_season_trend_model$fitted.values,
color="red",size=.5))+
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Season and Trend Model")
motion_season_trend_e = ts(motion_season_trend_model$residuals)
#plot residuals
autoplot(motion_season_trend_e, xlab="Time", ylab="Residuals")+
labs(title="Motion Trend & Season Model Residuals")
ggAcf(motion_season_trend_e)
ggPacf(motion_season_trend_e)
ggAcf(motion_season_trend_e)
ggPacf(motion_season_trend_e)
ggAcf(motion_season_trend_e)
motion_arma2_5 = arima(motion_season_trend_e, order =c(2,0,5))
summary(motion_arma2_5)
AIC(motion_arma2_5)
motion_arma2_5 = arima(motion_season_trend_e, order =c(2,0,1))
AIC(motion_arma2_5)
motion_arma2_5 = arima(motion_season_trend_e, order =c(1,0,5))
AIC(motion_arma2_5)
motion_arma2_5 = arima(motion_season_trend_e, order =c(2,1,5))
AIC(motion_arma2_5)
motion_arma2_5 = arima(motion_season_trend_e, order =c(2,0,2))
AIC(motion_arma2_5)
motion_arma2_5 = arima(motion_season_trend_e, order =c(2,0,6))
AIC(motion_arma2_5)
motion_auto = auto.arima(motion_season_trend_e)
summary(motion_auto)
knitr::opts_chunk$set(echo = TRUE)
#Load Libraries
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tseries)
library(forecast)
#For autoplot
library(ggfortify)
#Global Variables
school = 'UVA'
room = '211 Olsson'
start_date = '2021-09-01 00:00:00'
end_date = '2021-12-01 00:00:00'
#Load Motion Data
motion_data = read.table('./Data/motion_data.csv',header=T,sep=',')
#Select Date and Value
motion_data = motion_data %>% filter(location_general==school && location_specific==room) %>% select(time,value)
#Remove Duplicate Time Stamps
motion_data = motion_data %>%  distinct(time, .keep_all = T)
#Convert Time String to Time Object and Strip Extra Content
motion_data$time = strptime(motion_data$time,format = '%Y-%m-%d %H:%M:%OS')
#Bin the Sum of Motion Values into same hour
grouped_motion_data = motion_data %>%
mutate(rounded_time = trunc(time, "hours")) %>%
group_by(rounded_time) %>%
summarise(value=sum(value))
#Plot the Time Series
grouped_motion_data %>%
ggplot(aes(x=as.Date(rounded_time), y=value))+
geom_line()
#Convert to Date
grouped_motion_data$rounded_time = as.Date(grouped_motion_data$rounded_time)
#Choose Start Date
grouped_motion_data = grouped_motion_data %>%
filter(rounded_time >= as.Date(start_date) & rounded_time <= as.Date(end_date))
#Plot the Time Series
grouped_motion_data %>%
ggplot(aes(x=as.Date(rounded_time), y=value))+
geom_line()+
ylab("Sum Motion Occurances In Hour")+
xlab("Date")+
labs(title="Time Series of Motion Date")
#Make time series object
motion_ts = ts(grouped_motion_data$value)
#ACF
ggAcf(motion_ts)
motion_periodogram = spec.pgram(motion_ts, spans=9, demean = T, log='no')
#Find the max peak
max_omega =
motion_periodogram$freq[which(motion_periodogram$spec==max(motion_periodogram$spec))]
#The peak is:
max_omega
#The period is:
1/max_omega
#Make T
t = c(seq(1,dim(grouped_motion_data)[1]))
#FIX ME (Must change if you remove points for forecasting)
motion_season_model = lm(motion_ts ~ sin(2*pi*t/24) + cos(2*pi*t/24))
summary(motion_season_model)
motion_periodogram = spec.pgram(motion_ts, spans=9, demean = T, log='no')
#Find the max peak
max_omega =
motion_periodogram$freq[which(motion_periodogram$spec==max(motion_periodogram$spec))]
#The peak is:
max_omega
#The period is:
1/max_omega
#Make T
t = c(seq(1,dim(grouped_motion_data)[1]))
#FIX ME (Must change if you remove points for forecasting)
motion_season_model = lm(motion_ts ~ sin(2*pi*t/24) + cos(2*pi*t/24))
summary(motion_season_model)
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line()+
geom_line(aes(x=rounded_time,
y=motion_season_model$fitted.values, color="red"), size=1)+
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Season Model")
motion_trend_model = lm(motion_ts ~ t)
summary(motion_trend_model)
motion_trend_model = lm(motion_ts ~ t)
summary(motion_trend_model)
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line()+
stat_smooth(method='lm',col="red")+
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Trend Model")
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line()+
stat_smooth(method='lm',col="red")+
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Trend Model")
autoplot(motion_trend_model, labels.id=NULL)
motion_season_trend_model = lm(motion_ts ~ t + sin(2*pi*t/24) + cos(2*pi*t/24))
summary(motion_season_trend_model)
grouped_motion_data %>%
ggplot(aes(x=rounded_time, y=value))+
geom_line()+
geom_line(aes(x=rounded_time,
y=motion_season_trend_model$fitted.values,
color="red",size=.5))+
ylab("Motion Occurances Sum Values in Hour")+
xlab("Time (Hours)")+
labs(title="Motion Season and Trend Model")
motion_season_trend_e = ts(motion_season_trend_model$residuals)
#plot residuals
autoplot(motion_season_trend_e, xlab="Time", ylab="Residuals")+
labs(title="Motion Trend & Season Model Residuals")
ggAcf(motion_season_trend_e)
ggPacf(motion_season_trend_e)
motion_arma2_5 = arima(motion_season_trend_e, order =c(2,0,5))
summary(motion_arma2_5)
AIC(motion_arma2_5) #28748.48
motion_auto = auto.arima(motion_season_trend_e)
summary(motion_auto)
#ARIMA(1,0,3) 28766.06
ggAcf(motion_season_trend_e)
ggPacf(motion_season_trend_e)
motion_arma2_5 = arima(motion_season_trend_e, order =c(2,0,5))
summary(motion_arma2_5)
AIC(motion_arma2_5) #28748.48
motion_auto = auto.arima(motion_season_trend_e)
summary(motion_auto)
#ARIMA(1,0,3) 28766.06
forecast1 = predict(motion_arma2_5,10)
forecast1
forecast1 = predict(motion_auto,10)
forecast1
forecast1 = predict(motion_auto,30)
forecast1 = predict(motion_auto,30)
forecast1
